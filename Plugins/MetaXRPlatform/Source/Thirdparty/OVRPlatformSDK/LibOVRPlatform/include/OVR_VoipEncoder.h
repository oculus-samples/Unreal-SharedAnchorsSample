/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// This file was @generated with LibOVRPlatform/codegen/main. Do not modify it!

#ifndef OVR_VOIPENCODER_H
#define OVR_VOIPENCODER_H

#include "OVR_Platform_Defs.h"
#include <stddef.h>

/// \file
/// This is a custom encoder for voice over internet protocol (VoIP) data. A
/// VoIP session can be established by ovr_Voip_Start(). It provides a way to
/// encode PCM data into compressed VoIP data.
typedef struct ovrVoipEncoder *ovrVoipEncoderHandle;

/// This class is responsible for adding PCM (Pulse Code Modulation) data to
/// the encoder. This method takes in the PCM data and adds it to the internal
/// buffer of the encoder.
OVRP_PUBLIC_FUNCTION(void) ovr_VoipEncoder_AddPCM(const ovrVoipEncoderHandle obj, const float *inputData, unsigned int inputSize);

/// This method retrieves the compressed data from the encoder. This method
/// returns the actual compressed data, which can then be transmitted or
/// stored.
OVRP_PUBLIC_FUNCTION(size_t) ovr_VoipEncoder_GetCompressedData(const ovrVoipEncoderHandle obj, unsigned char *outputBuffer, size_t intputSize);

/// This method returns the size of the compressed VoIP data that will be
/// generated by the encoder. This method can be used to determine the amount
/// of memory needed to store the compressed data.
OVRP_PUBLIC_FUNCTION(size_t) ovr_VoipEncoder_GetCompressedDataSize(const ovrVoipEncoderHandle obj);


#endif
